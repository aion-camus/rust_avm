<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project basedir="." default="clean_buildmain" name="AVM">

    <property name="dir.global.workspace" value="."/>
    <property name="dir.global.build" value="${dir.global.workspace}/build"/>
    <property name="dir.global.build.main" value="${dir.global.build}/main"/>
    <property name="dir.global.build.scratch-deps-jar" value="${dir.global.build.main}/scratch-deps.jar"/>

    <target name="clean">
        <ant inheritAll="false" antfile="${dir.global.workspace}/org.aion.avm.rt/build.xml" target="clean">
            <property name="compile.debug" value="${compile.debug}"/>
        </ant>
        <ant inheritAll="false" antfile="${dir.global.workspace}/org.aion.avm.core/build.xml" target="clean">
            <property name="compile.debug" value="${compile.debug}"/>
        </ant>
        <ant inheritAll="false" antfile="${dir.global.workspace}/org.aion.avm.api/build.xml" target="clean">
            <property name="compile.debug" value="${compile.debug}"/>
        </ant>
        <ant inheritAll="false" antfile="${dir.global.workspace}/org.aion.avm.userlib/build.xml" target="clean">
            <property name="compile.debug" value="${compile.debug}"/>
        </ant>
        <ant inheritAll="false" antfile="${dir.global.workspace}/org.aion.avm.tooling/build.xml" target="clean">
            <property name="compile.debug" value="${compile.debug}"/>
        </ant>
        <delete dir="${dir.global.build}"/>

        <delete file="${dir.global.workspace}/avm.jar"/>
    </target>

    <target name="clean_buildmain">
        <echo message="Building ${ant.project.name}..."/>

        <delete dir="${dir.global.build.main}"/>
        <ant inheritAll="false" antfile="${dir.global.workspace}/org.aion.avm.api/build.xml" target="clean_buildmain">
            <property name="compile.debug" value="${compile.debug}"/>
        </ant>
        <ant inheritAll="false" antfile="${dir.global.workspace}/org.aion.avm.rt/build.xml" target="clean_buildmain">
            <property name="compile.debug" value="${compile.debug}"/>
        </ant>
        <ant inheritAll="false" antfile="${dir.global.workspace}/org.aion.avm.userlib/build.xml" target="clean_buildmain">
            <property name="compile.debug" value="${compile.debug}"/>
        </ant>
        <ant inheritAll="false" antfile="${dir.global.workspace}/org.aion.avm.core/build.xml" target="clean_buildmain">
            <property name="compile.debug" value="${compile.debug}"/>
        </ant>
        <ant inheritAll="false" antfile="${dir.global.workspace}/org.aion.avm.tooling/build.xml" target="clean_buildmain">
            <property name="compile.debug" value="${compile.debug}"/>
        </ant>

        <delete dir="${dir.global.workspace}/dist"/>

        <!-- Create a scratch JAR of our dependencies since we can't filter their contents in one step -->
        <jar jarfile="${dir.global.build.scratch-deps-jar}" >
            <zipgroupfileset dir="${dir.global.build.main}" includes="*.jar" />
            <zipgroupfileset dir="${dir.global.workspace}/lib" includes="*.jar" />
        </jar>

        <!-- Now, build this dependency JAR into our static avm.jar -->
        <jar jarfile="${dir.global.workspace}/dist/avm.jar">
            <manifest>
                <attribute name="Automatic-Module-Name" value="avm" />
                <attribute name="Main-Class" value="org.aion.cli.AvmCLI" />
            </manifest>
            <zipfileset src="${dir.global.build.scratch-deps-jar}">
                <exclude name="META-INF/**" />
                <exclude name="module-info.class" />
            </zipfileset>
        </jar>

        <copy file="${dir.global.build.main}/org-aion-avm-api.jar" todir="${dir.global.workspace}/dist/lib"></copy>
        <copy file="${dir.global.build.main}/org-aion-avm-userlib.jar" todir="${dir.global.workspace}/dist/lib"></copy>

        <copy file="docs/README.md" todir="${dir.global.workspace}/dist"></copy>
        <copy file="docs/USER_GUIDE.md" todir="${dir.global.workspace}/dist"></copy>

        <copy file="LICENSE.txt" todir="${dir.global.workspace}/dist"></copy>

        <copy file="scripts/compile.sh" todir="${dir.global.workspace}/dist"></copy>
        <chmod perm="755" file="${dir.global.workspace}/dist/compile.sh"></chmod>

        <javadoc packagenames="org.aion.avm.api.*"
                 defaultexcludes="yes"
                 destdir="${dir.global.workspace}/dist/javadoc"
                 author="true"
                 version="true"
                 use="true"
                 windowtitle="AVM Blockchain API">
            <arg value = "-html5"/>
            <fileset dir="org.aion.avm.api/src">
                <include name="**/*.java"/>
                <exclude name="**/module-info.java"/>
            </fileset>
            <fileset dir="org.aion.avm.userlib/src">
                <include name="**/*.java"/>
                <exclude name="**/module-info.java"/>
                <exclude name="**/AionPlainMap.java"/>
                <exclude name="**/AionPlainSet.java"/>
            </fileset>
        </javadoc>

        <copy todir="${dir.global.workspace}/dist/examples">
            <fileset dir="${dir.global.workspace}/org.aion.avm.tooling/src/examples">
                <include name="**/*.java"/>
            </fileset>
        </copy>
    </target>

    <target name="test">
        <echo message="Building tests for ${ant.project.name}..."/>

        <ant inheritAll="false" antfile="${dir.global.workspace}/org.aion.avm.userlib/build.xml" target="test">
            <property name="compile.debug" value="${compile.debug}"/>
        </ant>
        <ant inheritAll="false" antfile="${dir.global.workspace}/org.aion.avm.core/build.xml" target="test">
            <property name="compile.debug" value="${compile.debug}"/>
        </ant>
        <ant inheritAll="false" antfile="${dir.global.workspace}/org.aion.avm.rt/build.xml" target="test">
            <property name="compile.debug" value="${compile.debug}"/>
        </ant>
        <ant inheritAll="false" antfile="${dir.global.workspace}/org.aion.avm.tooling/build.xml" target="test">
            <property name="compile.debug" value="${compile.debug}"/>
        </ant>

<!-- We want to test that the dist and example work, especially when AVM is embedded in a non-system classloader.
     (In the future, we might formalize this, but we will start with inline logic, here)
 -->
        <delete dir="${dir.global.build}/dist"/>
        <copy todir="${dir.global.build}/dist">
            <fileset dir="${dir.global.workspace}/dist">
            </fileset>
        </copy>
        <chmod perm="755" file="${dir.global.build}/dist/compile.sh"></chmod>
        <javac debug="true" debuglevel="source,lines,vars" includeantruntime="false" release="10"
               srcdir="${dir.global.workspace}/dist_test"
            destdir="${dir.global.workspace}/dist_test" includes="**/*.java">
        </javac>
        <copy file="${dir.global.workspace}/dist_test/EmbedCli.class" todir="${dir.global.build}/dist"></copy>
        <exec executable="./compile.sh" dir="${dir.global.build}/dist">
            <arg value="examples.HelloWorld"/>
            <arg value="examples/HelloWorld.java"/>
        </exec>
        <java classname="EmbedCli" dir="${dir.global.build}/dist" fork="true" failonerror="true">
            <arg value="avm.jar"/>
            <arg value="build/dapp.jar"/>
        </java>
    </target>
</project>
